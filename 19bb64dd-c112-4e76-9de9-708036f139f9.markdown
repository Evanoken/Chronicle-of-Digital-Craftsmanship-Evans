# Wormhole Attack Simulation Report

## 1. Introduction
This report presents the simulation of a wormhole attack on a 6LoWPAN-RPL network using Contiki-NG and Cooja. The objective is to evaluate the impact of the attack on network performance metrics: packet loss, throughput, end-to-end delay, and energy consumption.

## 2. Simulation Setup
### Network Topology
- **Total Motes**: 11
- **Server (Mote 1)**: Position `(120, -40)`, acts as the RPL root.
- **Clients (Motes 2–6)**: Positions `(30, 50)`, `(20, 60)`, `(40, 60)`, `(25, 70)`, `(35, 70)`, send UDP packets to the server.
- **Interceptor (Mote 7)**: Position `(60, 20)`, intercepts packets, modifies them, and forwards them to the reinjector.
- **Normal Node (Mote 8)**: Position `(75, 0)`, placed between the malicious nodes but ignored by the interceptor.
- **Reinjector (Mote 9)**: Position `(90, -20)`, receives modified packets and either reroutes them to Mote 2 or drops them.
- **RPL Routers (Motes 10–11)**: Positions `(70, 40)`, `(80, 30)`, facilitate normal routing.

### Wormhole Attack Implementation
- **Interceptor (Mote 7)**:
  - Intercepts packets from clients.
  - Modifies the packet by prepending “modified_” to the data.
  - Forwards the modified packet to the reinjector (Mote 9) via a tunnel (port 6789).
- **Reinjector (Mote 9)**:
  - Receives the modified packet.
  - Alternates between rerouting the packet to Mote 2 (`fd00::212:7402:2:202`) or dropping it.
  - Ensures the packet does not reach the server.

### Simulation Scenarios
- **With Wormhole Attack**: Motes 7 and 9 are active.
- **Without Wormhole Attack**: Motes 7 and 9 are turned off, allowing normal RPL routing via Motes 10 and 11.
- Each scenario was run for 5 minutes (300 seconds).

## 3. Performance Metrics
The metrics were collected using Wireshark for packet data and mote output logs for latency and energy consumption. A Python script (`analyze_metrics.py`) was used to process the data and generate graphs.

### Packet Loss
- **With Attack**: High packet loss due to the reinjector rerouting or dropping packets.
- **Without Attack**: Lower packet loss as packets follow the normal RPL path to the server.

### Throughput
- **With Attack**: Reduced throughput due to fewer packets reaching the server.
- **Without Attack**: Higher throughput with normal routing.

### End-to-End Delay
- **With Attack**: Variable delay; packets that are rerouted may have lower latency, but most are dropped.
- **Without Attack**: Higher but consistent delay due to multi-hop routing.

### Energy Consumption
- **With Attack**: Higher energy consumption for clients due to retransmissions and interference from the attack.
- **Without Attack**: Lower energy consumption with stable routing.

## 4. Results
The results are summarized in the graphs generated by `analyze_metrics.py`:
- **Packet Loss**: `packet_loss.png`
- **Throughput**: `throughput.png`
- **Latency**: `latency.png`
- **Energy Consumption**: `energy.png`

## 5. Analysis
- **Packet Loss and Throughput**: The wormhole attack significantly increases packet loss and reduces throughput by preventing packets from reaching the server.
- **Delay**: The attack introduces variability in delay; rerouted packets may appear faster, but dropped packets result in timeouts.
- **Energy Consumption**: The attack increases energy usage due to additional retransmissions and interference.
- **Security Implications**: The wormhole attack disrupts normal routing, creates false paths, and can lead to further attacks like denial of service.

## 6. Countermeasures
- **Hop-Count Validation**: Verify the number of hops against the expected network topology.
- **Timestamp-Based Detection**: Detect unusually short delays indicative of a wormhole.
- **Geographic Routing**: Use location information to ensure packets follow realistic paths.
- **Intrusion Detection Systems**: Monitor for abnormal routing behavior.

## 7. Conclusion
The simulation successfully demonstrated a wormhole attack on a 6LoWPAN-RPL network, highlighting its impact on network performance. The results underscore the need for robust security mechanisms in IoT networks, especially in critical applications.

## 8. Files Submitted
- **Simulation File**: `wormhole-attack-simulation.csc`
- **Source Files**: `udp-client.c`, `udp-server.c`, `udp-interceptor.c`, `udp-reinjector.c`, `rpl-router.c`
- **Wireshark Captures**: `with_attack.pcapng`, `without_attack.pcapng`
- **Mote Output Logs**: `with_attack_log.txt`, `without_attack_log.txt`
- **Analysis Script**: `analyze_metrics.py`
- **Graphs**: `packet_loss.png`, `throughput.png`, `latency.png`, `energy.png`